// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render EditPostPage 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      }
    }
  >
    <Memo(Connect(AddPostPage))
      history={
        Object {
          "push": [MockFunction],
        }
      }
      post={
        Object {
          "description": "Rent",
          "id": "2",
          "title": "new",
        }
      }
      startEditPost={[MockFunction]}
      startRemovePost={[MockFunction]}
    />
  </Context.Provider>,
  "nodes": Array [
    <Context.Provider
      value={
        Object {
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Object {
            "addNestedSub": [Function],
            "getListeners": [Function],
            "handleChangeWrapper": [Function],
            "isSubscribed": [Function],
            "notifyNestedSubs": [Function],
            "trySubscribe": [Function],
            "tryUnsubscribe": [Function],
          },
        }
      }
    >
      <Memo(Connect(AddPostPage))
        history={
          Object {
            "push": [MockFunction],
          }
        }
        post={
          Object {
            "description": "Rent",
            "id": "2",
            "title": "new",
          }
        }
        startEditPost={[MockFunction]}
        startRemovePost={[MockFunction]}
      />
    </Context.Provider>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_context": Object {},
    "_didScheduleRenderPhaseUpdate": false,
    "_dispatcher": Object {
      "readContext": [Function],
      "useCallback": [Function],
      "useContext": [Function],
      "useDebugValue": [Function],
      "useDeferredValue": [Function],
      "useEffect": [Function],
      "useId": [Function],
      "useImperativeHandle": [Function],
      "useInsertionEffect": [Function],
      "useLayoutEffect": [Function],
      "useMemo": [Function],
      "useReducer": [Function],
      "useRef": [Function],
      "useResponder": [Function],
      "useState": [Function],
      "useSyncExternalStore": [Function],
      "useTransition": [Function],
    },
    "_element": <Provider
      store={
        Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Memo(Connect(AddPostPage))
        history={
          Object {
            "push": [MockFunction],
          }
        }
        post={
          Object {
            "description": "Rent",
            "id": "2",
            "title": "new",
          }
        }
        startEditPost={[MockFunction]}
        startRemovePost={[MockFunction]}
      />
    </Provider>,
    "_firstWorkInProgressHook": Object {
      "memoizedState": Array [
        Object {
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Object {
            "addNestedSub": [Function],
            "getListeners": [Function],
            "handleChangeWrapper": [Function],
            "isSubscribed": [Function],
            "notifyNestedSubs": [Function],
            "trySubscribe": [Function],
            "tryUnsubscribe": [Function],
          },
        },
        Array [
          Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        ],
      ],
      "next": Object {
        "memoizedState": Array [
          Object {
            "auth": Object {},
            "filters": Object {
              "text": "",
            },
            "posts": Array [],
          },
          Array [
            Object {
              "@@observable": [Function],
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          ],
        ],
        "next": null,
        "queue": null,
      },
      "queue": null,
    },
    "_forcedUpdate": false,
    "_idCounter": 0,
    "_instance": null,
    "_isReRender": false,
    "_newState": null,
    "_numberOfReRenders": 0,
    "_renderPhaseUpdates": null,
    "_rendered": <Context.Provider
      value={
        Object {
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "subscription": Object {
            "addNestedSub": [Function],
            "getListeners": [Function],
            "handleChangeWrapper": [Function],
            "isSubscribed": [Function],
            "notifyNestedSubs": [Function],
            "trySubscribe": [Function],
            "tryUnsubscribe": [Function],
          },
        }
      }
    >
      <Memo(Connect(AddPostPage))
        history={
          Object {
            "push": [MockFunction],
          }
        }
        post={
          Object {
            "description": "Rent",
            "id": "2",
            "title": "new",
          }
        }
        startEditPost={[MockFunction]}
        startRemovePost={[MockFunction]}
      />
    </Context.Provider>,
    "_rendering": false,
    "_updater": Updater {
      "_callbacks": Array [],
      "_renderer": [Circular],
    },
    "_workInProgressHook": null,
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Provider
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Memo(Connect(AddPostPage))
      history={
        Object {
          "push": [MockFunction],
        }
      }
      post={
        Object {
          "description": "Rent",
          "id": "2",
          "title": "new",
        }
      }
      startEditPost={[MockFunction]}
      startRemovePost={[MockFunction]}
    />
  </Provider>,
}
`;
